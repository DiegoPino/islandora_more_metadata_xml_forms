<?php

/**
 * @file
 * More Metadata XML Forms base module.
 * This module enables other solution packs to programaticly use multiple XML forms as Ingest steps, even forms defined by other modules.
 * Diego Pino N , Oct 2014
*/


/**
 * Implements hook_islandora_ingest_steps_alter
 * Alters ingest steps to allow extra metadata xml forms 
*/
 function islandora_more_metadata_xml_forms_islandora_ingest_steps_alter(array &$steps, array &$form_state) {
	
    
	 $select_association_form_step = !empty($steps['xml_form_builder_association_step']);
	 $step_storage = &islandora_ingest_form_get_step_storage($form_state, 'xml_form_builder_association_step');
     if (($select_association_form_step)){
 		//Means XML_form_builder is there, and will eventually try to give us a choice which XML metadataform we want to use
 		//In case we already defined one of this Forms in our ingestion steps hook, we must deactivate this options to avoid duplicates
		//or at least remove the already present as additional ingest step 
		//First we iterate over those steps who have an ['args'] key and are using our custom ingest form. If present, Those are the additional metadatasteps.
		$form_steps = islandora_ingest_form_get_form_steps($form_state); //Filter the ingest steps to only steps of type 'form'.
		
		if (count($form_steps) > 1)//If we get only one,then that form is for sure the metadata_ingest_step or a collection ingest step
			{
			$form_step_filter_onlyxmlforms_with_args = function($o) 
				{
				$isxmlformstep=array_key_exists('form_id',$o)? $o['form_id']==='islandora_more_metadata_xml_forms_additional_ingest_form' && array_key_exists('args',$o):false; //Keep only XML Forms used as Ingest Steps
				
	      	  	return $isxmlformstep;
				};
		
	   		 $form_steps_args= array_filter($form_steps, $form_step_filter_onlyxmlforms_with_args);
			 if (count($form_steps_args)>0)
			 	{
				$removeKeys=array('xml_form_builder_association_step','xml_form_builder_metadata_step');
			    $user_steps_args=array_diff_key($form_steps_args, array_flip($removeKeys));//Lets keep only those forms defined as ingest_steps by the user that have args argument
               
			    foreach($steps['xml_form_builder_association_step']['args'][0] as $forms => &$formargs)//Interate over the association_step args
					{
					foreach($user_steps_args as $userFormStep => $userFormStepDef)
						{
						$currentkey=key($userFormStepDef['args']);//We don't know the array key right now and are assuming the user correctly passed only one arg array. 
						//It should be the same as 'form id', but we will trust and get 'id' parameter: means inside args['form_id']['id'] anyway to be sure
						if ($formargs['id']==$userFormStepDef['args'][$currentkey]['id']) //if the custom step form id equals to the defined in association the unset this as choice
							{
								unset($steps['xml_form_builder_association_step']['args'][0][$forms]);	
							}
						}		
				
					}
				//Now $steps['xml_form_builder_association_step']['args'][0] has only those forms that are defined for this CMODEL but are not present as additional ingest steps.
				//Count how many we have
		        if (count($steps['xml_form_builder_association_step']['args'][0])<=1)//If we have 1 or less then this form is not longer needed
					{
						unset($steps['xml_form_builder_association_step']);
					
					}
				}
			}
	   
        }
  }
  /**
   * Implements hook_form_FORM_ID_alter().
   * Alters the metadata edit form, in case we are dealing with a secondary stream and we donÂ´t want to modify the Object's label (default)
  */ 
function islandora_more_metadata_xml_forms_form_xml_form_builder_edit_datastream_form_alter(array &$form, array &$form_state, $form_id)
 {
	 //here we don't have steps, but we need to know if the datastream to edit is main metadata stream or a secondary added to the ingest steps as custom metadata
	 //so we need to implement our own steps-search-evaluate function and do the same as the above function to evaluate what to do.
	 module_load_include('inc', 'islandora', 'includes/ingest.form');
     $other_steps=islandora_more_metadata_xml_forms_get_other_form_steps($form_state);
	 
	 foreach($other_steps as $step=>$values)
	 	{
	 	   $currentkey=key($values['args']);
		   if ($values['args'][$currentkey]['id']==$form_state['association']['id'])
		   	 {
				 form_load_include($form_state, 'inc', 'islandora_more_metadata_xml_forms', 'includes/ingest.form');
				 form_load_include($form_state, 'inc', 'islandora_more_metadata_xml_forms', 'includes/datastream.form');
			     $title_field_parents = $form_state['association']['title_field'];
			     $title_field_parents[] = '#required';
			     $title_field = drupal_array_set_nested_value($form, $title_field_parents, TRUE);
     
				 $form['update'] = array(
			       '#type' => 'submit',
			       '#value' => t('Update'),
			       '#name' => 'update',
			       '#submit' => array('islandora_more_metadata_xml_forms_edit_datastream_form_metadata_form_submit'),
			     );
				 break 1;
			}
	   }
	
 	
     	 	 	 	
 }
 
 
 function islandora_more_metadata_xml_forms_get_other_form_steps($form_state) {
   module_load_include('inc', 'islandora', 'includes/utilities');
   $steps = &drupal_static(__FUNCTION__);
   if (isset($steps)) {
     return $steps;
   }
   $steps = array();
   if (!empty($form_state['association']))
   		{
   		foreach (islandora_build_hook_list(ISLANDORA_INGEST_STEP_HOOK, array($form_state['association']['content_model'])) as $hook) {
     
     foreach (module_implements($hook) as $module) {
       $function = $module . '_' . $hook;
       $module_steps = (array) $function($form_state);
       $steps = array_merge($steps, $module_steps);
     }
   }
   $steps = array_filter($steps);
   $form_step_filter = function($o) {
	   return (($o['type'] == 'form') && (array_key_exists('args',$o)))?count($o['args']):false;
	 
   };
   $steps = array_filter($steps, $form_step_filter);
   //$steps should now contain only form steps that have and args array 
   foreach (islandora_build_hook_list(ISLANDORA_INGEST_STEP_HOOK,  array($form_state['association']['content_model'])) as $hook) {
     drupal_alter($hook, $steps, $form_state);
   }
   // Add any defaults.
   foreach ($steps as $key => &$step) { 
	 $step['id'] = $key;
   }
   uasort($steps, 'drupal_sort_weight');
}
   return $steps;
 
}
